// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var List           = require("bs-platform/lib/js/list.js");
var Curry          = require("bs-platform/lib/js/curry.js");
var Caml_array     = require("bs-platform/lib/js/caml_array.js");
var Pervasives     = require("bs-platform/lib/js/pervasives.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

console.log("Hello, BuckleScript and Reason!");

var c = 5;

var total = 15;

var oneSlash = "\\";

var twoSlash = "\\\\";

var world = "\xe4\xb8\x96\xe7\x95\x8c";

var helloWorld = "你好, " + (String(world) + "");

console.log(helloWorld);

var temp = 0.5 + 0.6;

console.log(2);

var someHorsePower = /* record */[
  /* power */10,
  /* metric : true */1
];

var lis = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* [] */0
    ]
  ]
];

var lis2 = /* :: */[
  4,
  lis
];

var msgs = 1;

var myArr = /* array */[
  "hello",
  "world"
];

var firstItem = Caml_array.caml_array_get(myArr, 0);

function greet(name) {
  return "hello" + name;
}

function add(x, y, z) {
  return (x + y | 0) + z | 0;
}

function greetMore(name) {
  return "Hello " + name;
}

function labeledArgs(name, some) {
  return name + some;
}

function shortLabeledArgs(name, some) {
  return name + some;
}

function logSomething() {
  console.log("hello");
  console.log("world");
  return /* () */0;
}

console.log("hello");

console.log("world");

function drawCircle(color, radius, _) {
  console.log(color);
  if (radius) {
    console.log(radius[0]);
    return /* () */0;
  } else {
    console.log(radius);
    return /* () */0;
  }
}

var curriedFunction = drawCircle(1, /* None */0, /* () */0);

var actualResultWithoutProvidingRadius = drawCircle(1, /* None */0, /* () */0);

var result = drawCircle(1, /* None */0, /* () */0);

function neverTerminate(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
    
  };
}

function callSecond(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
    
  };
}

function callFirst(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
    
  };
}

var message = "Good morning!";

function someFunction(param) {
  console.log(param[/* name */0]);
  return /* () */0;
}

function otherFunction(thePerson) {
  console.log(thePerson[/* name */0]);
  console.log(thePerson);
  return /* () */0;
}

var Destruct_000 = /* somePerson : record */[
  /* name */"Guy",
  /* age */30
];

var Destruct = /* module */[
  Destruct_000,
  /* n */"Guy",
  /* a */30,
  /* someFunction */someFunction,
  /* otherFunction */otherFunction
];

var reply;

switch (message) {
  case "Reason's pretty cool" : 
      reply = "Yep";
      break;
  case "good night" : 
      reply = "See ya!";
      break;
  case "hello" : 
  case "hey" : 
  case "heya" : 
  case "hi" : 
      reply = "hello to you too!";
      break;
  default:
    reply = "Nice to meet you!";
}

var foo = [5];

var five = foo[0];

foo[0] = 6;

for(var myBinding = 3; myBinding <= 4; ++myBinding){
  Pervasives.print_int(myBinding);
}

for(var myBinding$1 = 3; myBinding$1 >= 4; --myBinding$1){
  Pervasives.print_int(myBinding$1);
}

while(true) {
  Pervasives.print_int(3);
};

var $$class = CamlinternalOO.create_table([
      "drive",
      "doYouWant"
    ]);

var ids = CamlinternalOO.new_methods_variables($$class, [
      "enableEnvy",
      "drive",
      "doYouWant"
    ], ["hasEnvy"]);

var enableEnvy = ids[0];

var drive = ids[1];

var doYouWant = ids[2];

var hasEnvy = ids[3];

CamlinternalOO.set_methods($$class, /* array */[
      drive,
      (function (self$1, speed) {
          Curry._2(self$1[0][enableEnvy], self$1, /* true */1);
          return speed;
        }),
      doYouWant,
      (function (self$1, _) {
          return self$1[hasEnvy][0];
        }),
      enableEnvy,
      (function (self$1, envy) {
          self$1[hasEnvy][0] = envy;
          return /* () */0;
        })
    ]);

function obj_init() {
  var self = CamlinternalOO.create_object_opt(0, $$class);
  self[hasEnvy] = [/* false */0];
  return self;
}

CamlinternalOO.init_class($$class);

var obj = obj_init(0);

var defaultGreeting = "Hello";

function getAudience(excited) {
  if (excited !== 0) {
    return "world!";
  } else {
    return "world";
  }
}

var BaseComponent = /* module */[
  /* defaultGreeting */defaultGreeting,
  /* getAudience */getAudience
];

var defaultGreeting$1 = "Hey";

function render() {
  return "Hey world!";
}

var ActualComponent = /* module */[
  /* getAudience */getAudience,
  /* defaultGreeting */defaultGreeting$1,
  /* render */render
];

function MakeSet(Item) {
  var add = function (currentSet, newItem) {
    if (List.exists((function (x) {
              return Curry._2(Item[/* equal */0], x, newItem);
            }), currentSet)) {
      return currentSet;
    } else {
      return /* :: */[
              newItem,
              currentSet
            ];
    }
  };
  return /* module */[
          /* empty : [] */0,
          /* add */add
        ];
}

var b = 2;

var score = 10;

var a = /* true */1;

var numbers = /* tuple */[
  1,
  2,
  3
];

var two = 2;

var me = /* record */[
  /* age */5,
  /* name */"Mondo"
];

var nextMe = 1;

var metric = /* true */1;

var areUCrushingIt = /* No */["constructorName"];

var tup = /* tuple */[
  1,
  "string",
  /* true */1
];

var color = 1;

var payloadRadius = /* None */0;

var isMorning = /* true */1;

var buddy = /* tuple */[
  10,
  20,
  20
];

var startValue = 3;

var endValue = 4;

exports.b                                  = b;
exports.c                                  = c;
exports.score                              = score;
exports.total                              = total;
exports.oneSlash                           = oneSlash;
exports.twoSlash                           = twoSlash;
exports.world                              = world;
exports.helloWorld                         = helloWorld;
exports.a                                  = a;
exports.temp                               = temp;
exports.numbers                            = numbers;
exports.two                                = two;
exports.me                                 = me;
exports.nextMe                             = nextMe;
exports.metric                             = metric;
exports.someHorsePower                     = someHorsePower;
exports.areUCrushingIt                     = areUCrushingIt;
exports.tup                                = tup;
exports.lis                                = lis;
exports.lis2                               = lis2;
exports.msgs                               = msgs;
exports.myArr                              = myArr;
exports.firstItem                          = firstItem;
exports.greet                              = greet;
exports.add                                = add;
exports.greetMore                          = greetMore;
exports.labeledArgs                        = labeledArgs;
exports.shortLabeledArgs                   = shortLabeledArgs;
exports.logSomething                       = logSomething;
exports.drawCircle                         = drawCircle;
exports.color                              = color;
exports.curriedFunction                    = curriedFunction;
exports.actualResultWithoutProvidingRadius = actualResultWithoutProvidingRadius;
exports.payloadRadius                      = payloadRadius;
exports.result                             = result;
exports.neverTerminate                     = neverTerminate;
exports.callSecond                         = callSecond;
exports.callFirst                          = callFirst;
exports.isMorning                          = isMorning;
exports.message                            = message;
exports.buddy                              = buddy;
exports.Destruct                           = Destruct;
exports.reply                              = reply;
exports.foo                                = foo;
exports.five                               = five;
exports.startValue                         = startValue;
exports.endValue                           = endValue;
exports.obj                                = obj;
exports.BaseComponent                      = BaseComponent;
exports.ActualComponent                    = ActualComponent;
exports.MakeSet                            = MakeSet;
/*  Not a pure module */
